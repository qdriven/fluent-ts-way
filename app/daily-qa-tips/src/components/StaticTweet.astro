---
import moment from 'moment';
import { TwitterClient } from 'twitter-api-client';
const twitterClient = new TwitterClient({
  apiKey: import.meta.env.PUBLIC_TWITTER_API_KEY,
  apiSecret: import.meta.env.PUBLIC_TWITTER_API_SECRET,
  accessToken: import.meta.env.PUBLIC_TWITTER_ACCESS_TOKEN,
  accessTokenSecret: import.meta.env.PUBLIC_TWITTER_ACCESS_TOKEN_SECRET,
});

const { id } = Astro.props;

// Try to fetch from cache
const CACHE_FILE_PATH = '_cache/tweets.json';

const readCache = () => {
  if (fs.existsSync(CACHE_FILE_PATH)) {
    const cacheFile = fs.readFileSync(CACHE_FILE_PATH);
    return JSON.parse(cacheFile);
  }
  // no cache found.
  return {};
};

const writeCache = (_data) => {
  fs.writeFile(CACHE_FILE_PATH, JSON.stringify(_data), (err) => {
    if (err) throw err;
    console.log(`>>> tweet cached successfully`);
  });
};

let data;
const cachedTweets = await readCache();
if (cachedTweets[id]) {
  data = cachedTweets[id];
} else {
  data = await twitterClient.tweets.statusesShow({
    id: id,
    tweet_mode: 'extended',
  });
}

let { full_text } = data;

if (data.in_reply_to_screen_name) {
  full_text = full_text.replace(`@${data.in_reply_to_screen_name}`, '');
}

data.entities.urls.forEach((url) => {
  full_text = full_text.replace(
    url.url,
    `<a rel="noreferrer noopener" target="_blank" href="${url.url}">${url.display_url}</a>`
  );
});

data.entities.user_mentions.forEach((mention) => {
  full_text = full_text.replace(
    `@${mention.screen_name}`,
    `<a rel="noreferrer noopener" aria-label="${mention.screen_name} on Twitter" target="_blank" href="https://twitter.com/${mention.screen_name}">@${mention.screen_name}</a>`
  );
});

data.entities?.hashtags.forEach((hashtag) => {
  full_text = full_text.replace(
    `#${hashtag.text}`,
    `<a rel="noreferrer noopener" target="_blank" href="https://twitter.com/hashtag/${hashtag.text}">#${hashtag.text}</a>`
  );
});

if (data.entities.media) {
  data.entities.media.forEach((media) => {
    full_text = full_text.replace(media.url, '');
  });
}

const date = new Date(
  data.created_at.replace(
    /^\w+ (\w+) (\d+) ([\d:]+) \+0000 (\d+)$/,
    '$1 $2 $4 $3 UTC'
  )
);

const parsedDate = moment(date).calendar();
---

<div class="not-prose">
  <blockquote
    class="flex flex-col max-w-md mx-auto transition-all bg-white rounded-md shadow-md font-xs dark:bg-dark hover:shadow-lg "
  >
    <div class="flex items-center p-4">
      <img
        class="h-10 rounded-full"
        width="40px"
        height="40px"
        src={data.user.profile_image_url_https}
        alt={`${data.user.name} profile image`}
      />
      <div class="flex-1 mx-4">
        <div class="text-base font-bold text-gray-900 dark:text-white">
          {data.user.name}
        </div>
        <div
          class="text-gray-500 transition-colors dark:text-gray-400 hover:text-barbie"
        >
          <a
            rel="noreferrer noopener"
            target="_blank"
            href={`https://twitter.com/${data.user.screen_name}`}
          >
            @{data.user.screen_name}
          </a>
        </div>
      </div>
      <div>ðŸ¦‰</div>
    </div>
    <div class="px-4 mb-4 prose dark:prose-invert" set:html={full_text}></div>
    <div class="px-4 text-sm text-gray-500 dark:text-gray-400">
      {parsedDate}
    </div>

    <div class="flex justify-between text-gray-500 dark:text-gray-400">
      <a
        rel="noreferrer noopener"
        target="_blank"
        href={`https://twitter.com/intent/tweet?in_reply_to=${data.id_str}`}
        class="p-4 transition-colors hover:text-barbie"
      >
        Reply
      </a>
      <a
        rel="noreferrer noopener"
        target="_blank"
        href={`https://twitter.com/intent/retweet?tweet_id=${data.id_str}`}
        class="p-4 transition-colors hover:text-barbie"
      >
        Retweet
      </a>
      <a
        rel="noreferrer noopener"
        target="_blank"
        href={`https://twitter.com/intent/like?tweet_id=${data.id_str}`}
        class="p-4 transition-colors hover:text-barbie"
      >
        Like
      </a>
    </div>
  </blockquote>
</div>
